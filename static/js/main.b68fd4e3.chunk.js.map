{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["columns","Header","accessor","Table","data","atribuir","openChat","talkjsContainer","useTable","getTableProps","headerGroups","rows","prepareRow","TableHead","map","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","render","TableBody","row","i","getRowProps","cells","cell","getCellProps","Button","variant","color","onClick","style","height","ref","App","useState","setData","talkSession","setSession","me","setUser","email","setEmail","user","setLogin","React","createRef","formatSolicitacao","item","numResp","atribuicoes_Tecnicos","length","usuarioNome","usuario","nome","responsavelNome","tecnico","baseUrl","useEffect","Talk","ready","then","a","axios","result","id","funcionario","User","name","welcomeMessage","session","Session","appId","solicitacoes","fetchData","original","index","post","resp","status","login","get","conversation","getOrCreateConversation","setParticipant","createInbox","selected","mount","current","bind","Grid","container","direction","justify","alignItems","marginTop","md","sm","xs","TextField","label","type","fullWidth","autoFocus","required","onChange","value","currentTarget","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b68fd4e3.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useTable } from \"react-table\";\nimport MaUTable from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { Button, TextField, Grid } from '@material-ui/core';\n\nimport Talk from \"talkjs\";\n\nconst columns = [\n  {\n    Header: \"Solicitações recebidas\",\n    columns: [\n      {\n        Header: \"ID\",\n        accessor: \"id\"\n      },\n      {\n        Header: \"Descricao\",\n        accessor: \"descricao\"\n      },\n      {\n        Header: \"usuario\",\n        accessor: \"usuarioNome\"\n      },\n      {\n        Header: \"Técnico responsavel\",\n        accessor: \"responsavelNome\"\n      },\n    ]\n  },\n];\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [talkSession, setSession] = useState([]);\n  const [me, setUser] = useState([]);\n  const [email, setEmail] = useState();\n  const [user, setLogin] = useState();\n\n  const talkjsContainer = React.createRef();\n  const formatSolicitacao = (item) => {\n    const numResp = item.atribuicoes_Tecnicos.length\n    return {\n      ...item,\n      usuarioNome: item.usuario.nome,\n      responsavelNome: numResp ? item.atribuicoes_Tecnicos[numResp - 1].tecnico.nome : '',\n    }\n  };\n  const baseUrl = 'https://atv-int-3.herokuapp.com'\n\n  useEffect(() => {\n    if (!user) return\n    Talk.ready.then(async () => {\n      const result = await axios(\n        `${baseUrl}/tecnicos/${user}/`,\n      );\n      const { id, nome, email } = result.data;\n      const funcionario = new Talk.User({\n        id,\n        name: nome,\n        email,\n        welcomeMessage: \"Hey there! How are you? :-)\"\n      });\n      const session = new Talk.Session({\n        appId: \"t1gLnbbF\",\n        me: funcionario,\n      });\n      setSession(session)\n      setUser(funcionario)\n    });\n  }, [user]);\n\n  useEffect(() => {\n    if (!user) return\n    const fetchData = async () => {\n      const result = await axios(\n        `${baseUrl}/solicitacoes/?expand=usuario,expand=usuario,atribuicoes_Tecnicos.tecnico`,\n      );\n      const solicitacoes = result.data.map(item => formatSolicitacao(item));\n      setData(solicitacoes);\n    };\n    fetchData();\n  }, [user]);\n\n  const atribuir = async ({ original: { id }, index }) => {\n    if (id) {\n      const resp = await axios.post(\n        `${baseUrl}/solicitacoes/${id}/atribuir/`,\n        { tecnico: user },\n      );\n      if (resp.status === 200) {\n        const solicitacoes = data.map(item => item);\n        solicitacoes[index] = formatSolicitacao(resp.data)\n        setData(solicitacoes);\n      }\n    }\n  };\n  const openChat = ({ original: { id } }) => {\n    const conversation = talkSession.getOrCreateConversation(`prod_solicitacao_${id}`);\n    conversation.setParticipant(me);\n    const inbox = talkSession.createInbox({ selected: conversation });\n    inbox.mount(talkjsContainer.current);\n\n  };\n  const login = async () => {\n    if (!email) return\n    const resp = await axios.get(\n      `${baseUrl}/tecnicos/?email=${email}`\n    );\n    const tecnico = resp.data;\n    if (tecnico.length === 1) {\n      setLogin(tecnico[0].id)\n    }\n  };\n  return (\n    <div>\n      {!user ?\n        <Grid container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          style={{ marginTop: '10%' }}\n        >\n          <Grid item md={4} sm={12} xs={12}>\n            <TextField id=\"username\" label=\"Email\" type=\"email\" fullWidth autoFocus required onChange={({ currentTarget: { value } }) => { setEmail(value) }} />\n\n          </Grid>\n          <Grid item md={1} sm={12} xs={12}>\n            <Button color=\"primary\" variant=\"contained\" onClick={login}>login</Button>\n          </Grid>\n        </Grid>\n        :\n        <Table columns={columns} data={data} atribuir={atribuir} openChat={openChat.bind(talkSession)} talkjsContainer={talkjsContainer} />\n      }\n    </div>\n  );\n}\n\n\n\nconst Table = ({ columns, data, atribuir, openChat, talkjsContainer }) => {\n  const { getTableProps, headerGroups, rows, prepareRow } = useTable({\n    columns,\n    data\n  });\n  return (\n    <div>\n      <MaUTable {...getTableProps()}>\n        <TableHead>\n          {headerGroups.map(headerGroup => (\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <TableCell {...column.getHeaderProps()}>\n                  {column.render(\"Header\")}\n                </TableCell>\n              ))}\n              <TableCell>Ações</TableCell>\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell {...cell.getCellProps()}>\n                      {cell.render(\"Cell\")}\n                    </TableCell>\n                  );\n                })}\n                <TableCell>\n                  <Button variant=\"contained\" color=\"primary\" onClick={() => { atribuir(row) }}>Atribuir</Button>\n                  <Button variant=\"contained\" color=\"secondary\" onClick={() => { openChat(row) }}>Chat</Button>\n                </TableCell>\n              </TableRow>\n            );\n          })}\n        </TableBody>\n      </MaUTable>\n      <div style={{ height: '550px' }} ref={talkjsContainer}></div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}